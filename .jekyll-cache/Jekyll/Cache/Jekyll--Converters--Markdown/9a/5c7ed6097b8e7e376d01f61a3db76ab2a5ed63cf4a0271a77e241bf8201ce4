I"ôr<p>We recently moved from Ava to Jest for our testing framework and we saw both speedups
and welcome new features.</p>

<!--halt-->

<h1 id="what-do-we-gain">What do we Gain?</h1>

<p>Benefits:</p>

<ul>
  <li>Locally it has sped up our tests tests from about 40-50 seconds for Ava, to 8-10 for jest</li>
  <li>On Travis it has cut test runs down about 9-10 minutes</li>
  <li>My system doesnâ€™t freeze up from Ava memory spiking and making my fans run like crazy :)</li>
  <li>Allows for nested tests</li>
  <li>Includes own mocking library based on Jasmine</li>
  <li>Allows for interactive test debugging</li>
  <li>Snapshot testing</li>
  <li>Allows us to remove multiple dependencies such as mockery, react-native-mock, ava</li>
  <li>Made by Facebook and has a strong React/React-native community + better docs</li>
</ul>

<p>Negatives:</p>

<p>You need to know a couple different ways to mock things and when to use each, hopefully this can address that though.</p>

<h1 id="new-testing-scripts">New Testing Scripts</h1>

<p>The Ava test scripts in the <code class="language-plaintext highlighter-rouge">package.json</code> have been replaced with the following:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// basic testing</span>
<span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jest</span><span class="dl">"</span><span class="p">,</span>
<span class="c1">// debugging tests</span>
<span class="dl">"</span><span class="s2">test:debug</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node --inspect-brk node_modules/.bin/jest --runInBand</span><span class="dl">"</span><span class="p">,</span>
<span class="c1">// do not show anything output to console, hides warnings</span>
<span class="dl">"</span><span class="s2">test:silent</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jest --silent</span><span class="dl">"</span><span class="p">,</span>
<span class="c1">// enter Jest's interactive test watching</span>
<span class="dl">"</span><span class="s2">test:watch</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jest --watch</span><span class="dl">"</span><span class="p">,</span>
<span class="c1">// only run tests related to files staged files</span>
<span class="dl">"</span><span class="s2">test:change</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jest --onlyChanged</span><span class="dl">"</span><span class="p">,</span>
<span class="c1">// stop running the tests once an error is encountered</span>
<span class="dl">"</span><span class="s2">test:failfast</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jest --bail</span><span class="dl">"</span><span class="p">,</span>
<span class="c1">// Run the tests and output coverage using at most 4 workers since travis has limited</span>
<span class="c1">// concurrency</span>
<span class="dl">"</span><span class="s2">coverage</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">npm run test:silent -- --coverage --maxWorkers=4</span><span class="dl">"</span><span class="p">,</span>
<span class="c1">// Jest will output coverage data to `lcov.info`, send that to coveralls</span>
<span class="dl">"</span><span class="s2">coveralls</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">npm run coverage &amp;&amp; cat ./coverage/lcov.info | coveralls</span><span class="dl">"</span><span class="p">,</span>
</code></pre></div></div>

<p>All the commands support sending a path as an argument for running specific tests. My preference
is for doing <code class="language-plaintext highlighter-rouge">npm run test:silent</code> because it makes seeing the tests that passed easier,
we could consider using it as the default going forward.</p>

<h1 id="debugging-tests">Debugging Tests</h1>

<p>What the heck is <code class="language-plaintext highlighter-rouge">node --inspect-brk node_modules/.bin/jest --runInBand</code>?</p>

<p>You can visit the node docs <a href="https://nodejs.org/en/docs/inspector/">here</a>.</p>

<p><code class="language-plaintext highlighter-rouge">inspect-brk</code> basically enables the inspctor and then we run jest with the <code class="language-plaintext highlighter-rouge">runInBand</code> flag,
which makes tests run synchronously since the debugging doesnâ€™t work well with multiple processes.</p>

<p>It is described in more detail <a href="http://facebook.github.io/jest/docs/en/troubleshooting.html">here</a>.</p>

<p>Steps to debugging:</p>

<ol>
  <li>To use it drop a debugger in the file you want to go to</li>
  <li>Run <code class="language-plaintext highlighter-rouge">npm test:debug</code> optionally with a path to the specific file</li>
  <li>Open <code class="language-plaintext highlighter-rouge">chrome://inspect</code> and click the node session listed there</li>
  <li>Now with this tab open it will take you to the inspector every time you run <code class="language-plaintext highlighter-rouge">test:debug</code></li>
  <li>Debug like normally!</li>
</ol>

<p>Note that this requires node &gt; 8 so to get this feature and general performance improvements bump to
node <code class="language-plaintext highlighter-rouge">v8.7.0</code> from https://nodejs.org/en/</p>

<h1 id="how-to-test-with-jest">How to Test with Jest</h1>

<p>Jest has <a href="http://facebook.github.io/jest/docs/en/api.html">good documentation</a>. The core mocking features are:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">jest.fn</code></li>
  <li><code class="language-plaintext highlighter-rouge">jest.spyOn</code></li>
  <li><code class="language-plaintext highlighter-rouge">jest.mock</code></li>
  <li><code class="language-plaintext highlighter-rouge">jest.mockClear</code></li>
  <li><code class="language-plaintext highlighter-rouge">jest.mockRestore</code></li>
  <li><code class="language-plaintext highlighter-rouge">jest.doMock</code></li>
  <li><code class="language-plaintext highlighter-rouge">jest.resetModules</code></li>
</ul>

<p>as well as lifecycle hooks like <code class="language-plaintext highlighter-rouge">beforeEach</code>, <code class="language-plaintext highlighter-rouge">afterEach</code>, <code class="language-plaintext highlighter-rouge">beforeAll</code>, <code class="language-plaintext highlighter-rouge">afterAll</code> and test groupings
using <code class="language-plaintext highlighter-rouge">describe</code>.</p>

<h1 id="using-jestmock">Using jest.mock</h1>

<p><code class="language-plaintext highlighter-rouge">jest.mock</code> is used to mock out the implementation of a module.</p>

<p>It takes a second argument that is the replacement implementation, which is what weâ€™re now using in our <code class="language-plaintext highlighter-rouge">Test/Setup.js</code> like we were with mockery to replace implementations:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="dl">'</span><span class="s1">@nerdwallet/nwa</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">NWA</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">track</span><span class="p">:</span> <span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">eventProps</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">trackPageView</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
    <span class="na">generatePageViewId</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
    <span class="na">setGlobalProp</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
    <span class="na">enableLogger</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
    <span class="na">getGlobalProps</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
    <span class="na">getUserProps</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
  <span class="p">}),</span>
<span class="p">}));</span>
</code></pre></div></div>

<h1 id="using-jestfn">Using jest.fn</h1>

<p><code class="language-plaintext highlighter-rouge">jest.fn</code> returns a mock function that is used in the <code class="language-plaintext highlighter-rouge">Tests/Setup.js</code> a lot as the mock out
the implementation of modules. You can pass it a return value like shown here:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mockFn</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">();</span>
<span class="nx">mockFn</span><span class="p">();</span>
<span class="nx">expect</span><span class="p">(</span><span class="nx">mockFn</span><span class="p">).</span><span class="nx">toHaveBeenCalled</span><span class="p">();</span>

<span class="c1">// With a mock implementation:</span>
<span class="kd">const</span> <span class="nx">returnsTrue</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="kc">true</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">returnsTrue</span><span class="p">());</span> <span class="c1">// true;</span>
</code></pre></div></div>

<p>I donâ€™t use it much outside of the test setup file though because it doesnâ€™t provide a way to restore
the original implementation of functions, so youâ€™d need to keep a reference to the original.</p>

<h1 id="using-jestspyon">Using jest.spyOn</h1>

<p><code class="language-plaintext highlighter-rouge">jest.spyOn</code> is what I recommend using most, it creates a mock function similar to <code class="language-plaintext highlighter-rouge">jest.fn</code> but also
tracks calls to the function and supports <code class="language-plaintext highlighter-rouge">mockClear</code> and <code class="language-plaintext highlighter-rouge">mockRestore</code> for reseting calls to the mock and restoring the original implementation of what you mocked.</p>

<p>In the <code class="language-plaintext highlighter-rouge">test-apptentive</code> file I used it before all tests to mock out <code class="language-plaintext highlighter-rouge">NWApptentive</code>:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">NWApptentive</span><span class="p">,</span> <span class="dl">'</span><span class="s1">engage</span><span class="dl">'</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">(</span><span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
<span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">NWApptentive</span><span class="p">,</span> <span class="dl">'</span><span class="s1">setUserInfo</span><span class="dl">'</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">(</span><span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
<span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">Utilities</span><span class="p">,</span> <span class="dl">'</span><span class="s1">logError</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>First specify the module, then the method to mock off of it as a string and use mock methods like <code class="language-plaintext highlighter-rouge">mockReturnValue</code> or <code class="language-plaintext highlighter-rouge">mockImplementation</code> or any others from <a href="http://facebook.github.io/jest/docs/en/mock-function-api.html#mockfnmockreturnvaluevalue">here</a>.</p>

<h1 id="example-test">Example Test</h1>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">apptentive middleware should clear user</span><span class="se">\'</span><span class="s1">s info on signout</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">signout</span><span class="p">.</span><span class="nx">success</span><span class="p">();</span>
  <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">action</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">NWApptentive</span><span class="p">.</span><span class="nx">setUserInfo</span><span class="p">).</span><span class="nx">toHaveBeenCalledWith</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">afterEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">NWApptentive</span><span class="p">.</span><span class="nx">engage</span><span class="p">.</span><span class="nx">mockClear</span><span class="p">();</span>
  <span class="nx">NWApptentive</span><span class="p">.</span><span class="nx">setUserInfo</span><span class="p">.</span><span class="nx">mockClear</span><span class="p">();</span>
  <span class="nx">Utilities</span><span class="p">.</span><span class="nx">logError</span><span class="p">.</span><span class="nx">mockClear</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<p>In between tests here I use <code class="language-plaintext highlighter-rouge">mockClear</code> to reset calls to them or sometimes <code class="language-plaintext highlighter-rouge">mockRestore</code> if you need the original functionality in a different test in that file. You donâ€™t need to restore it if youâ€™re done with it for the file.</p>

<h1 id="jestdomock">jest.doMock</h1>

<blockquote>
  <p>When using babel-jest, calls to mock will automatically be hoisted to the top of the code block. Use this method if you want to explicitly avoid this behavior.</p>
</blockquote>

<p>There are only a couple cases in our code where we need different module implementations <em>between</em> tests in the same file and if you do then use <code class="language-plaintext highlighter-rouge">doMock</code> which is similar to mock but does not get hoisted and interfere with other tests.</p>

<p>One example is the <code class="language-plaintext highlighter-rouge">Platform</code> module:</p>

<h1 id="another-example">Another Example</h1>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Android &lt; 5.0</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">beforeAll</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">mockVersion</span> <span class="o">=</span> <span class="nx">AndroidSdkVersions</span><span class="p">[</span><span class="dl">'</span><span class="s1">5.0</span><span class="dl">'</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">jest</span><span class="p">.</span><span class="nx">doMock</span><span class="p">(</span><span class="dl">'</span><span class="s1">Platform</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">OS</span><span class="p">:</span> <span class="dl">'</span><span class="s1">android</span><span class="dl">'</span><span class="p">,</span> <span class="na">Version</span><span class="p">:</span> <span class="nx">mockVersion</span> <span class="p">}));</span>
  <span class="p">});</span>

  <span class="nx">afterAll</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">jest</span><span class="p">.</span><span class="nx">resetModules</span><span class="p">();</span>
  <span class="p">});</span>

  <span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">Should return false if access token not present</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">state</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nx">hasAccessToken</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">isAuthSessionReady</span><span class="p">(</span><span class="nx">state</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">Should return true if access token present</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">isAuthSessionReady</span><span class="p">(</span><span class="nx">state</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Here I want to set the Platform just for the Android section in the test file. I can use
the lifecycle hooks of beforeAll and afterAll for this test group.</p>

<h1 id="jestresetmodules">jest.resetModules</h1>

<p>After the test group we <strong>need</strong> to do call <code class="language-plaintext highlighter-rouge">jest.resetModules</code> to clear the module registry cache and restore the implementation so that iOS can similarly use <code class="language-plaintext highlighter-rouge">doMock</code>.</p>

<p>Do not just try to do another <code class="language-plaintext highlighter-rouge">doMock</code> on top of the old one.</p>

<h1 id="example-of-accessing-spies">Example of Accessing Spies</h1>

<p>Here we setup some event listeners in the middleware that we want to call in our tests.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">beforeAll</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">addEventListenerSpy</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">PushNotificationIOS</span><span class="p">,</span> <span class="dl">'</span><span class="s1">addEventListener</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">deviceInfoSpy</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">DeviceInfo</span><span class="p">,</span> <span class="dl">'</span><span class="s1">getModel</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">Should not set pending permission due to simulator notifications error</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">deviceInfoSpy</span><span class="p">.</span><span class="nx">mockReturnValue</span><span class="p">(</span><span class="dl">'</span><span class="s1">Simulator</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">registerHandler</span> <span class="o">=</span> <span class="nx">addEventListenerSpy</span><span class="p">.</span><span class="nx">mock</span><span class="p">.</span><span class="nx">calls</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>

  <span class="nx">registerHandler</span><span class="p">();</span>

  <span class="nx">expect</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">getActions</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">([</span><span class="nx">pushDeviceRegistered</span><span class="p">()]);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Just access the mock object off of the spy to examine or execute the calls.</p>

<h1 id="snapshots">Snapshots</h1>

<p>Jest supports snapshot testing:</p>

<blockquote>
  <p>Instead of rendering the graphical UI, which would require building the entire app, you can use a test renderer to quickly generate a serializable value for your React tree.</p>
</blockquote>

<p>The first time the snapshot test is added it saves the output which you can inspect. Any time you run the tests it will diff the new output against what it has saved and if it has changed you have the choice to update it if you intended for that change or reflect on what went wrong.</p>

<h1 id="component-snapshot-googlesigninbutton">Component Snapshot: GoogleSignInButton</h1>

<p>Here is a snapshot for a component I did as an example:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">beforeAll</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">Selectors</span><span class="p">,</span> <span class="dl">'</span><span class="s1">getCurrentRoute</span><span class="dl">'</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">(</span><span class="dl">'</span><span class="s1">route</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">afterAll</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">Selectors</span><span class="p">.</span><span class="nx">getCurrentRoute</span><span class="p">.</span><span class="nx">mockRestore</span><span class="p">(</span><span class="dl">'</span><span class="s1">Selectors</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should render correctly</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">tree</span> <span class="o">=</span> <span class="nx">renderer</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">GoogleSignInButton</span> <span class="nx">store</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">).</span><span class="nx">toJSON</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">tree</span><span class="p">).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<h1 id="reducer-snapshot-debt">Reducer Snapshot: Debt</h1>

<p>And it can easily be done for reducers too:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">START getDebtGoalDetails</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">debtReducer</span><span class="p">(</span><span class="nx">INITIAL_STATE</span><span class="p">,</span> <span class="nx">getDebtGoalDetails</span><span class="p">.</span><span class="nx">start</span><span class="p">())).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
<span class="p">});</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">SUCCESS getDebtGoalDetails</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">payloadData</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">payload</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">test_key</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">};</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">debtReducer</span><span class="p">(</span><span class="nx">INITIAL_STATE</span><span class="p">,</span> <span class="nx">getDebtGoalDetails</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="nx">payloadData</span><span class="p">))).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
<span class="p">});</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">FAIL getDebtGoalDetails</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">debtReducer</span><span class="p">(</span><span class="nx">INITIAL_STATE</span><span class="p">,</span> <span class="nx">getDebtGoalDetails</span><span class="p">.</span><span class="nx">fail</span><span class="p">())).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<h1 id="useful-references">Useful References</h1>

<ul>
  <li><a href="http://facebook.github.io/jest/docs/en/api.html">Jest Docs</a></li>
  <li><a href="http://facebook.github.io/jest/docs/en/troubleshooting.html">Jest Debugging</a></li>
  <li><a href="http://facebook.github.io/jest/docs/en/tutorial-react-native.html#content">Using Jest with React Native</a></li>
  <li><a href="https://nodejs.org/en/docs/inspector/">The Node Inspector</a></li>
  <li><a href="http://facebook.github.io/jest/docs/en/cli.html#content">Jest CLI</a></li>
</ul>
:ET