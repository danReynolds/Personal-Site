I"öÅ<p>A walk-through of some of the API decisions to consider when writing a JavaScript library.</p>

<!--halt-->

<h1 id="writing-a-js-library">Writing a JS Library</h1>

<p>Whether you are writing your first open-source library or developing a private repo to benefit multiple teams at your company, sharing code is one of the most rewarding things to do as a developer and it is a practice at the heart of the JavaScript community.</p>

<p>We will be doing a walk-through of the components of a JavaScript library including some options for structuring its <strong>Public API</strong>, as well as tools for controlling its <strong>data access and mutation</strong>. After comparing these options, we‚Äôll look at which of these patterns some well-known JavaScript libraries choose to follow.</p>

<h2 id="getting-started">Getting Started</h2>

<p>Let‚Äôs say we have some valuable tool that we want to share with the larger community. Here we‚Äôll use the example of a tool for calculating a credit score from a user‚Äôs financial accounts.</p>

<p>It could look something like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// CreditCalculator.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">CreditCalculator</span><span class="p">(</span><span class="nx">bankAccounts</span><span class="p">,</span> <span class="nx">creditCards</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">creditCards</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">bankAccounts</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">creditCardAnalyzer</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">creditCardAnalyzer</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Do math...</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">bankAccountAnalyzer</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">bankAccountAnalyzer</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Do more math...</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">calculateScore</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// I'm sure it's just this simple...</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">creditCardAnalyzer</span><span class="p">()</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">bankAccountAnalyzer</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="c1">// client.js</span>
<span class="k">import</span> <span class="nx">CreditCalculator</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">CreditCalculator</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">creditCalculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CreditCalculator</span><span class="p">(</span>
  <span class="p">[</span><span class="dl">'</span><span class="s1">Chase</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Wells Fargo</span><span class="dl">'</span><span class="p">],</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Visa</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">MasterCard</span><span class="dl">'</span><span class="p">]</span>
<span class="p">);</span>
<span class="nx">creditCalculator</span><span class="p">.</span><span class="nx">calculateScore</span><span class="p">();</span> <span class="c1">// 800</span>
</code></pre></div></div>

<p>Our core functionality is finished! Our tool is able to calculate credit scores based on a user‚Äôs bank accounts and credit cards. We publish it up to NPM and receive lots of downloads and positive feedback from initial users, hurray!</p>

<p>But a little while later, we start getting interesting questions from consumers of the library who are playing around with it:</p>

<ol>
  <li>I called this analyzer method but it didn‚Äôt work, what‚Äôs wrong?</li>
  <li>How can I access the bank accounts it uses?</li>
  <li>How do I update the credit cards that I passed in?</li>
</ol>

<p>Let‚Äôs classify each of these problems:</p>

<ol>
  <li><em>I called this analyzer method but it didn‚Äôt work, what‚Äôs wrong?</em> - The user shouldn‚Äôt be calling the analyzer functions, this is an issue with establishing a <strong>public</strong> API.</li>
  <li><em>How can I see which banks it is using in its calculation?</em> - This is an issue with <strong>data access</strong>.</li>
  <li><em>How do I update the credit cards that I passed in?</em> - This is an issue with <strong>data assignment and mutation</strong></li>
</ol>

<p>To answer the first question, we need to control what functionality we want to expose to the client. Currently, all of our internal properties are exposed, which makes it too easy for them to use the module incorrectly.</p>

<h2 id="establishing-a-public-api">Establishing a Public API</h2>

<blockquote>
  <p>What are these analyzer methods I see? Should I be using them?</p>
</blockquote>

<p>The first, and simplest thing we can do to differentiate our public and private implementation is to use <strong>underscore prefixing</strong>.</p>

<p>This is a common pattern in JS libraries, and is simple to do:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">CreditCalculator</span><span class="p">(</span><span class="nx">bankAccounts</span><span class="p">,</span> <span class="nx">creditCards</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">creditCards</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">bankAccounts</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_creditCardAnalyzer</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">creditCardAnalyzer</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Do math...</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_bankAccountAnalyzer</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">bankAccountAnalyzer</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Do more math...</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">calculateScore</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">creditCardAnalyzer</span><span class="p">()</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">bankAccountAnalyzer</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Some library maintainers find this, along with private or deprecated documentation using tools like <a href="https://github.com/jsdoc/jsdoc">JSDoc</a> to be enough of a discouragement. They leave it up to consumers to know that when they use properties prefixed this way, they are risking breaking changes in future version and generally may encounter unexpected behaviour.</p>

<p>If we instead want to go further and not only discourage but prevent them from accessing our private implementation, we can use the <strong>module pattern</strong>.</p>

<h2 id="module-pattern">Module Pattern</h2>

<p>The module pattern take advantages of closures to only expose the properties that the library wants to make available.</p>

<p>The function below is called right away so that it can create a closure over the local <code class="language-plaintext highlighter-rouge">bankAccounts</code> and <code class="language-plaintext highlighter-rouge">creditCards</code> variables and use them throughout the implementation without them ever being exposed.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// CreditCalculator.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">(</span><span class="kd">function</span> <span class="nx">CreditCalculator</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">calculateScore</span><span class="p">()</span> <span class="p">{</span>
       <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bankAccounts</span><span class="p">,</span> <span class="nx">creditCards</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="kd">let</span> <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">let</span> <span class="nx">creditCards</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">initialBankAccounts</span><span class="p">,</span> <span class="nx">initialCreditCards</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">initialBankAccounts</span><span class="p">;</span>
        <span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">initialCreditCards</span><span class="p">;</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">bankAccounts</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">creditCards</span><span class="p">,</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">publicCalculateScore</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">calculateScore</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">})();</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// client.js</span>
<span class="k">import</span> <span class="nx">CreditCalculator</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">CreditCalculator</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">creditCalculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CreditCalculator</span><span class="p">(</span>
  <span class="p">[</span><span class="dl">'</span><span class="s1">Chase</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Wells Fargo</span><span class="dl">'</span><span class="p">],</span>
  <span class="p">[</span><span class="dl">'</span><span class="s1">Visa</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">MasterCard</span><span class="dl">'</span><span class="p">]</span>
<span class="p">);</span>
<span class="nx">creditCalculator</span><span class="p">.</span><span class="nx">calculateScore</span><span class="p">();</span> <span class="c1">// 801</span>
</code></pre></div></div>

<p>A function that is immediately executed like this is referred to in JavaScript as an Immediately-Invoked Function Expression (IIFE).</p>

<h2 id="data-access">Data Access</h2>

<blockquote>
  <p>How can I see which banks it is using in its calculation?</p>
</blockquote>

<p>There are different ways a library can choose to let clients access its public data.</p>

<ol>
  <li>
    <p><strong>Underscore prefixing</strong>: We can follow the same pre-fixing practice for access to public vs private data properties.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// CreditCalculator.js</span>
 <span class="k">export</span> <span class="k">default</span> <span class="p">(</span><span class="kd">function</span> <span class="nx">CreditCalculator</span><span class="p">()</span> <span class="p">{</span>
     <span class="kd">const</span> <span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">calculateScore</span><span class="p">()</span> <span class="p">{</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bankAccounts</span><span class="p">,</span> <span class="nx">creditCards</span><span class="p">)</span>
     <span class="p">}</span>
     <span class="kd">let</span> <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="p">[];</span>
     <span class="kd">let</span> <span class="nx">creditCards</span> <span class="o">=</span> <span class="p">[];</span>

     <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">initialBankAccounts</span><span class="p">,</span> <span class="nx">initialCreditCards</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">initialBankAccounts</span><span class="p">;</span>
         <span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">initialCreditCards</span><span class="p">;</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">_bankAccounts</span> <span class="o">=</span> <span class="nx">bankAccounts</span><span class="p">;</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">_creditCards</span> <span class="o">=</span> <span class="nx">creditCards</span><span class="p">,</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">publicCalculateScore</span><span class="p">()</span> <span class="p">{</span>
             <span class="k">return</span> <span class="nx">calculateScore</span><span class="p">();</span>
         <span class="p">}</span>
     <span class="p">}</span>
 <span class="p">})();</span>
</code></pre></div>    </div>

    <ul>
      <li>Pros: Simplicity</li>
      <li>Cons: Does not actually prevent access to private properties</li>
    </ul>

    <hr />
  </li>
  <li>
    <p><strong>Get methods</strong>: If we want to limit our public API to not directly expose our internal properties, we could instead write a get-prefixed wrapper function.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// CreditCalculator.js</span>
 <span class="k">export</span> <span class="k">default</span> <span class="p">(</span><span class="kd">function</span> <span class="nx">CreditCalculator</span><span class="p">()</span> <span class="p">{</span>
     <span class="kd">const</span> <span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">calculateScore</span><span class="p">()</span> <span class="p">{</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bankAccounts</span><span class="p">,</span> <span class="nx">creditCards</span><span class="p">)</span>
     <span class="p">}</span>
     <span class="kd">let</span> <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="p">[];</span>
     <span class="kd">let</span> <span class="nx">creditCards</span> <span class="o">=</span> <span class="p">[];</span>

     <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">initialBankAccounts</span><span class="p">,</span> <span class="nx">initialCreditCards</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">initialBankAccounts</span><span class="p">;</span>
         <span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">initialCreditCards</span><span class="p">;</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">getBankAccounts</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">getBankAccounts</span><span class="p">()</span> <span class="p">{</span>
             <span class="k">return</span> <span class="nx">bankAccounts</span><span class="p">;</span>
         <span class="p">};</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">getCreditCards</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">getBankAccounts</span><span class="p">()</span> <span class="p">{</span>
             <span class="k">return</span> <span class="nx">creditCards</span><span class="p">;</span>
         <span class="p">};</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">publicCalculateScore</span><span class="p">()</span> <span class="p">{</span>
             <span class="k">return</span> <span class="nx">calculateScore</span><span class="p">();</span>
         <span class="p">}</span>
     <span class="p">}</span>
 <span class="p">})();</span>
</code></pre></div>    </div>

    <ul>
      <li>Pros: Prevents access/assignment to internal properties</li>
      <li>Cons: Makes clients access properties through indirect proxy functions</li>
    </ul>

    <hr />
  </li>
  <li>
    <p><strong>Property getters</strong>: JS supports customizing how properties can be accessed, modified and removed using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">defineProperty</a> API.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// CreditCalculator.js</span>
 <span class="k">export</span> <span class="k">default</span> <span class="p">(</span><span class="kd">function</span> <span class="nx">CreditCalculator</span><span class="p">()</span> <span class="p">{</span>
     <span class="kd">const</span> <span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">calculateScore</span><span class="p">()</span> <span class="p">{</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bankAccounts</span><span class="p">,</span> <span class="nx">creditCards</span><span class="p">)</span>
     <span class="p">}</span>
     <span class="kd">let</span> <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="p">[];</span>
     <span class="kd">let</span> <span class="nx">creditCards</span> <span class="o">=</span> <span class="p">[];</span>

     <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">initialBankAccounts</span><span class="p">,</span> <span class="nx">initialCreditCards</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">initialBankAccounts</span><span class="p">;</span>
         <span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">initialCreditCards</span><span class="p">;</span>

         <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">bankAccounts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
             <span class="na">configurable</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
             <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="na">writable</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
             <span class="na">get</span><span class="p">:</span> <span class="kd">function</span> <span class="nx">getBankAccounts</span><span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="nx">bankAccounts</span><span class="p">;</span>
             <span class="p">}</span>
         <span class="p">});</span>

         <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">creditCards</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
             <span class="na">value</span><span class="p">:</span> <span class="nx">creditCards</span><span class="p">,</span>
         <span class="p">});</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">publicCalculateScore</span><span class="p">()</span> <span class="p">{</span>
             <span class="k">return</span> <span class="nx">calculateScore</span><span class="p">();</span>
         <span class="p">}</span>
     <span class="p">}</span>
 <span class="p">})();</span>
</code></pre></div>    </div>

    <ul>
      <li>Pros: Precise control over how properties can be accessed</li>
    </ul>

    <p>In the first example we use the <code class="language-plaintext highlighter-rouge">get</code> attribute of <code class="language-plaintext highlighter-rouge">defineProperty</code> to specify what should happen when a user accesses the <code class="language-plaintext highlighter-rouge">bankAccounts</code> property. In this case we use our function to return the underlying <code class="language-plaintext highlighter-rouge">bankAccounts</code> list. Let‚Äôs go through the three additional attributes, <code class="language-plaintext highlighter-rouge">configurable</code>, <code class="language-plaintext highlighter-rouge">enumerable</code> and <code class="language-plaintext highlighter-rouge">writable</code> <strong>(CEW)</strong>:</p>

    <ol>
      <li><strong>configurable</strong>: Controls whether the attributes of the property can be re-defined, changed or deleted - by changed it doesn‚Äôt mean that its <em>value</em> cannot be changed, that is dictated by the <em>writable</em> attribute. Instead it means whether you can re-define the property with <code class="language-plaintext highlighter-rouge">defineProperty</code> again and whether you could alter its original CEW definition. For our getter, since we don‚Äôt want it to be modified in any of these ways by the client, we will set it to <code class="language-plaintext highlighter-rouge">false</code>.</li>
      <li><strong>enumerable</strong>: Controls whether enumerating an object‚Äôs properties such as with <code class="language-plaintext highlighter-rouge">Object.keys</code> should return that property. Since clients should be able to discover our getter, we will set it to <code class="language-plaintext highlighter-rouge">true</code>.</li>
      <li><strong>writable</strong>: Controls whether the property can be written with the assignment operator. Since we haven‚Äôt talked about exposing a way to update our API yet, we‚Äôll default this to <code class="language-plaintext highlighter-rouge">false</code> as well.</li>
    </ol>

    <blockquote>
      <p>Note: All of these properties default to <code class="language-plaintext highlighter-rouge">false</code>.</p>
    </blockquote>

    <p>In our second example with <code class="language-plaintext highlighter-rouge">creditCards</code>, we don‚Äôt define a getter, but instead directly assign a <code class="language-plaintext highlighter-rouge">value</code> to our defined property. This will use the CEW defaults of false, preventing any changes to the property and is a nice short-hand.</p>
  </li>
</ol>

<h2 id="data-assignment-and-mutation">Data Assignment and Mutation</h2>

<blockquote>
  <p>How do I update the credit cards that I passed in?</p>
</blockquote>

<p>There are two scenarios to consider, a user could attempt to update their credit cards by assignment, by doing something like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">CreditCalculator</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">CreditCalculator</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">creditCalculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CreditCalculator</span><span class="p">(</span>
  <span class="p">[</span><span class="dl">'</span><span class="s1">Chase</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Wells Fargo</span><span class="dl">'</span><span class="p">],</span>
  <span class="p">[</span><span class="dl">'</span><span class="s1">Visa</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">MasterCard</span><span class="dl">'</span><span class="p">]</span>
<span class="p">);</span>
<span class="nx">creditCalculator</span><span class="p">.</span><span class="nx">creditCards</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Visa</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Amex</span><span class="dl">'</span><span class="p">];</span>
</code></pre></div></div>

<p>or they could try to update the data by mutating an existing object:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">CreditCalculator</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">CreditCalculator</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">creditCalculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CreditCalculator</span><span class="p">(</span>
  <span class="p">[</span><span class="dl">'</span><span class="s1">Chase</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Wells Fargo</span><span class="dl">'</span><span class="p">],</span>
  <span class="p">[</span><span class="dl">'</span><span class="s1">Visa</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">MasterCard</span><span class="dl">'</span><span class="p">]</span>
<span class="p">);</span>
<span class="nx">creditCalculator</span><span class="p">.</span><span class="nx">creditCards</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="dl">'</span><span class="s1">Amex</span><span class="dl">'</span><span class="p">])</span>
</code></pre></div></div>

<p>First, let‚Äôs look into how we can control <strong>data assignment</strong>:</p>

<ol>
  <li>
    <p><strong>Set methods</strong>: Similarly to a <code class="language-plaintext highlighter-rouge">get</code>-prefixed function, we could write a simple set wrapper function.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// CreditCalculator.js</span>
 <span class="k">export</span> <span class="k">default</span> <span class="p">(</span><span class="kd">function</span> <span class="nx">CreditCalculator</span><span class="p">()</span> <span class="p">{</span>
     <span class="kd">const</span> <span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">calculateScore</span><span class="p">()</span> <span class="p">{</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bankAccounts</span><span class="p">,</span> <span class="nx">creditCards</span><span class="p">)</span>
     <span class="p">}</span>
     <span class="kd">let</span> <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="p">[];</span>
     <span class="kd">let</span> <span class="nx">creditCards</span> <span class="o">=</span> <span class="p">[];</span>

     <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">initialBankAccounts</span><span class="p">,</span> <span class="nx">initialCreditCards</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">initialBankAccounts</span><span class="p">;</span>
         <span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">initialCreditCards</span><span class="p">;</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">setBankAccounts</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">setBankAccounts</span><span class="p">(</span><span class="nx">newBankAccounts</span><span class="p">)</span> <span class="p">{</span>
             <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">newBankAccounts</span><span class="p">;;</span>
         <span class="p">};</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">setCreditCards</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">setCreditCards</span><span class="p">(</span><span class="nx">newCreditCards</span><span class="p">)</span> <span class="p">{</span>
             <span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">newCreditCards</span><span class="p">;</span>
         <span class="p">};</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">publicCalculateScore</span><span class="p">()</span> <span class="p">{</span>
             <span class="k">return</span> <span class="nx">calculateScore</span><span class="p">();</span>
         <span class="p">}</span>
     <span class="p">}</span>
 <span class="p">})();</span>
</code></pre></div>    </div>

    <ul>
      <li>Pros: Prevents access/assignment to internal properties</li>
      <li>Cons: Once again makes clients interact with properties through indirect functions</li>
    </ul>

    <hr />
  </li>
  <li>
    <p><strong>Property setters</strong>: the <code class="language-plaintext highlighter-rouge">defineProperty</code> API also allows us to define how to assign properties.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// CreditCalculator.js</span>
 <span class="k">export</span> <span class="k">default</span> <span class="p">(</span><span class="kd">function</span> <span class="nx">CreditCalculator</span><span class="p">()</span> <span class="p">{</span>
     <span class="kd">const</span> <span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">calculateScore</span><span class="p">()</span> <span class="p">{</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bankAccounts</span><span class="p">,</span> <span class="nx">creditCards</span><span class="p">)</span>
     <span class="p">}</span>
     <span class="kd">let</span> <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="p">[];</span>
     <span class="kd">let</span> <span class="nx">creditCards</span> <span class="o">=</span> <span class="p">[];</span>

     <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">initialBankAccounts</span><span class="p">,</span> <span class="nx">initialCreditCards</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">initialBankAccounts</span><span class="p">;</span>
         <span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">initialCreditCards</span><span class="p">;</span>

         <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">bankAccounts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
             <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="na">get</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="nx">bankAccounts</span><span class="p">;</span>
             <span class="p">},</span>
             <span class="na">set</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newBankAccounts</span><span class="p">)</span> <span class="p">{</span>
                 <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">newBankAccounts</span><span class="p">;</span>
             <span class="p">}</span>
         <span class="p">});</span>

         <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">creditCards</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
             <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="na">get</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="nx">creditCards</span><span class="p">;</span>
             <span class="p">},</span>
             <span class="na">set</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newCreditCards</span><span class="p">)</span> <span class="p">{</span>
                 <span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">newCreditCards</span><span class="p">;</span>
             <span class="p">}</span>
         <span class="p">});</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">publicCalculateScore</span><span class="p">()</span> <span class="p">{</span>
             <span class="k">return</span> <span class="nx">calculateScore</span><span class="p">();</span>
         <span class="p">}</span>
     <span class="p">}</span>
 <span class="p">})();</span>
</code></pre></div>    </div>

    <ul>
      <li>Pros: Allows for direct, fully-customizable assignment of properties</li>
    </ul>

    <hr />

    <blockquote>
      <p>Note: We no longer specify the <code class="language-plaintext highlighter-rouge">writable</code> attribute, since it would conflict with the <code class="language-plaintext highlighter-rouge">set</code> attribute.</p>
    </blockquote>
  </li>
</ol>

<p>Next let‚Äôs look at some options for controlling <strong>Data Mutation</strong>:</p>

<ol>
  <li>
    <p><strong>Spread Operator</strong>: The spread operator <code class="language-plaintext highlighter-rouge">{...}</code>/<code class="language-plaintext highlighter-rouge">[...]</code> is a useful tool for making data immutable.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// CreditCalculator.js</span>
 <span class="k">export</span> <span class="k">default</span> <span class="p">(</span><span class="kd">function</span> <span class="nx">CreditCalculator</span><span class="p">()</span> <span class="p">{</span>
     <span class="kd">const</span> <span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">calculateScore</span><span class="p">()</span> <span class="p">{</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bankAccounts</span><span class="p">,</span> <span class="nx">creditCards</span><span class="p">)</span>
     <span class="p">}</span>
     <span class="kd">let</span> <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="p">[];</span>
     <span class="kd">let</span> <span class="nx">creditCards</span> <span class="o">=</span> <span class="p">[];</span>

     <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">initialBankAccounts</span><span class="p">,</span> <span class="nx">initialCreditCards</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">initialBankAccounts</span><span class="p">;</span>
         <span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">initialCreditCards</span><span class="p">;</span>

         <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">bankAccounts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
             <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="na">get</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="p">[...</span><span class="nx">bankAccounts</span><span class="p">];</span>
             <span class="p">},</span>
             <span class="na">set</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newBankAccounts</span><span class="p">)</span> <span class="p">{</span>
                 <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">newBankAccounts</span><span class="p">;</span>
             <span class="p">}</span>
         <span class="p">});</span>

         <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">creditCards</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
             <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="na">get</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="p">[...</span><span class="nx">creditCards</span><span class="p">];</span>
             <span class="p">},</span>
             <span class="na">set</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newCreditCards</span><span class="p">)</span> <span class="p">{</span>
                 <span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">newCreditCards</span><span class="p">;</span>
             <span class="p">}</span>
         <span class="p">});</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">publicCalculateScore</span><span class="p">()</span> <span class="p">{</span>
             <span class="k">return</span> <span class="nx">calculateScore</span><span class="p">();</span>
         <span class="p">}</span>
     <span class="p">}</span>
 <span class="p">})();</span>
</code></pre></div>    </div>

    <ul>
      <li>Pros: Simple way to prevent mutation of internal properties</li>
      <li>Cons: Difficult to use for nested objects</li>
    </ul>

    <hr />
  </li>
  <li>
    <p><strong>Cloning</strong>: Libraries like Lodash have utilities for <a href="https://lodash.com/docs/4.17.15#clone">cloning</a> objects.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// CreditCalculator.js</span>
 <span class="k">export</span> <span class="k">default</span> <span class="p">(</span><span class="kd">function</span> <span class="nx">CreditCalculator</span><span class="p">()</span> <span class="p">{</span>
     <span class="kd">const</span> <span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">calculateScore</span><span class="p">()</span> <span class="p">{</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bankAccounts</span><span class="p">,</span> <span class="nx">creditCards</span><span class="p">)</span>
     <span class="p">}</span>
     <span class="kd">let</span> <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">([]);</span>
     <span class="kd">let</span> <span class="nx">creditCards</span> <span class="o">=</span> <span class="p">[</span><span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">([]);</span>

     <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">initialBankAccounts</span><span class="p">,</span> <span class="nx">initialCreditCards</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nx">initialBankAccounts</span><span class="p">;</span>
         <span class="nx">creditCards</span> <span class="o">=</span> <span class="nx">initialCreditCards</span><span class="p">;</span>

         <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">bankAccounts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
             <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="na">get</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">bankAccounts</span><span class="p">);</span>
             <span class="p">},</span>
             <span class="na">set</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newBankAccounts</span><span class="p">)</span> <span class="p">{</span>
                 <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">newBankAccounts</span><span class="p">);</span>
             <span class="p">}</span>
         <span class="p">});</span>

         <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">creditCards</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
             <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="na">get</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">creditCards</span><span class="p">);</span>
             <span class="p">},</span>
             <span class="na">set</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newCreditCards</span><span class="p">)</span> <span class="p">{</span>
                 <span class="nx">creditCards</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">newCreditCards</span><span class="p">);</span>
             <span class="p">}</span>
         <span class="p">});</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">publicCalculateScore</span><span class="p">()</span> <span class="p">{</span>
             <span class="k">return</span> <span class="nx">calculateScore</span><span class="p">();</span>
         <span class="p">}</span>
     <span class="p">}</span>
 <span class="p">})();</span>
</code></pre></div>    </div>

    <ul>
      <li>Pros: Internal objects are not exposted to the client</li>
      <li>Cons: Has performance implications for large, frequently accessed objects, loses referential equality checking</li>
    </ul>

    <hr />
  </li>
  <li>
    <p><strong>Freezing</strong>: The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze</a> API can be used to prevent mutation of properties.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// CreditCalculator.js</span>
 <span class="k">export</span> <span class="k">default</span> <span class="p">(</span><span class="kd">function</span> <span class="nx">CreditCalculator</span><span class="p">()</span> <span class="p">{</span>
     <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">initialBankAccounts</span><span class="p">,</span> <span class="nx">initialCreditCards</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">([...</span><span class="nx">initialBankAccounts</span><span class="p">]);</span>
         <span class="nx">creditCards</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">([...</span><span class="nx">initialCreditCards</span><span class="p">]);</span>

         <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">bankAccounts</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
             <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="na">get</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="nx">bankAccounts</span><span class="p">;</span>
             <span class="p">},</span>
             <span class="na">set</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newBankAccounts</span><span class="p">)</span> <span class="p">{</span>
                 <span class="nx">bankAccounts</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">([...</span><span class="nx">newBankAccounts</span><span class="p">]);</span>
             <span class="p">}</span>
         <span class="p">});</span>

         <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">creditCards</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
             <span class="na">enumerable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
             <span class="na">get</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="nx">creditCards</span><span class="p">;</span>
             <span class="p">},</span>
             <span class="na">set</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newCreditCards</span><span class="p">)</span> <span class="p">{</span>
                 <span class="nx">creditCards</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">([...</span><span class="nx">newCreditCards</span><span class="p">]);</span>
             <span class="p">}</span>
         <span class="p">});</span>

         <span class="k">this</span><span class="p">.</span><span class="nx">calculateScore</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">publicCalculateScore</span><span class="p">()</span> <span class="p">{</span>
             <span class="k">return</span> <span class="nx">calculateScore</span><span class="p">();</span>
         <span class="p">}</span>
     <span class="p">}</span>
 <span class="p">})();</span>
</code></pre></div>    </div>

    <p>Freezing objects prevents adding, removing, writing or re-configuration of a property‚Äôs CEW attributes. For an array like in our example, that means that mutative APIs like <code class="language-plaintext highlighter-rouge">Array.push</code> will not update the object.</p>

    <ul>
      <li>Pros: Referential equality maintained across accesses</li>
      <li>Cons: Prevents internal modification of objects (could also be a win depending on your opinions around data immutability)</li>
    </ul>

    <hr />
  </li>
</ol>

<blockquote>
  <p>Note: A gotcha with all of the above approaches is that they do not handle deeply nested objects. There are libraries that support <a href="https://lodash.com/docs/4.17.15#cloneDeep">deep cloning</a> and <a href="https://github.com/substack/deep-freeze">freezing</a> of objects.</p>
</blockquote>

<h2 id="putting-it-all-together">Putting it all together</h2>

<p>At this point we have demonstrated that JavaScript developers have a number of options for designing the different basic components of their libaries:</p>

<table>
  <thead>
    <tr>
      <th>Component</th>
      <th>Pattern</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Public API</td>
      <td>underscore prefixing, module pattern, property getters</td>
    </tr>
    <tr>
      <td>Data Access</td>
      <td>underscore prefixing, get methods, property getters</td>
    </tr>
    <tr>
      <td>Data Assignment</td>
      <td>underscore prefixing, set methods, setter properties</td>
    </tr>
    <tr>
      <td>Data Mutation</td>
      <td>spread operator, cloning, freezing</td>
    </tr>
  </tbody>
</table>

<p>We‚Äôll now see which options some popular libraries choose in their own implementations:</p>

<h2 id="case-study-react">Case Study: <a href="https://github.com/facebook/react">React</a></h2>

<h3 id="data-access-assignment-and-mutation">Data Access, Assignment and Mutation</h3>

<p>React supplies classes like Component and PureComponent to create its UI. Here is an <a href="https://reactjs.org/docs/forms.html#the-textarea-tag">example</a>  from the React docs:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">EssayForm</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Please write an essay about your favorite DOM element.</span><span class="dl">'</span>
    <span class="p">};</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">handleChange</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">handleSubmit</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleSubmit</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">handleChange</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="na">value</span><span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">handleSubmit</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">An essay was submitted: </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSubmit</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span>
          <span class="nx">Essay</span><span class="p">:</span>
          <span class="o">&lt;</span><span class="nx">textarea</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleChange</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Submit</span><span class="dl">"</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here they‚Äôve defined a form with an editable text-area that a user can type in. If the user has typed something, it gets stored in the <code class="language-plaintext highlighter-rouge">state</code> data accessor on that component instance.</p>

<p>The <a href="https://reactjs.org/docs/state-and-lifecycle.html#do-not-modify-state-directly">React docs</a> make clear that <code class="language-plaintext highlighter-rouge">state</code> is not to be mutated directly:</p>

<p><img src="/images/tech/react-state.png" alt="reactState" /></p>

<p>As a React developer one of the first things you learn is to instead call the <code class="language-plaintext highlighter-rouge">setState</code> API to change your component‚Äôs state. This is <strong>not</strong>, however, enforced by the library and the following lines will execute fine:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">newThing</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">this is not a good idea...</span><span class="dl">"</span><span class="p">;</span> 
<span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">yea you shouldn't do this either...</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>While this direct assignment will not cause any immediate errors, since it was not done through <code class="language-plaintext highlighter-rouge">setState</code>, React will not know to re-render and since it is not an object, it will blow up at some later execution point.</p>

<p>React has chosen in their API to not limit assignment and mutation in any way for its properties. Instead, it generally relies on convention, its comprehensive documentation and the downstream errors you will get if you were to make a change like this to keep developers in check.</p>

<p>React <strong>does</strong> call out erroneous assignment at the end of the <a href="https://github.com/facebook/react/blob/1022ee0ec140b8fce47c43ec57ee4a9f80f42eca/packages/react-reconciler/src/ReactFiberClassComponent.js#L730">componentWillMount</a> lifecycle event:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">componentWillMount</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">function</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">instance</span><span class="p">.</span><span class="nx">componentWillMount</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">oldState</span> <span class="o">!==</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">__DEV__</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">warningWithoutStack</span><span class="p">(</span>
        <span class="kc">false</span><span class="p">,</span>
        <span class="dl">'</span><span class="s1">%s.componentWillMount(): Assigning directly to this.state is </span><span class="dl">'</span> <span class="o">+</span>
          <span class="dl">"</span><span class="s2">deprecated (except inside a component's </span><span class="dl">"</span> <span class="o">+</span>
          <span class="dl">'</span><span class="s1">constructor). Use setState instead.</span><span class="dl">'</span><span class="p">,</span>
        <span class="nx">getComponentName</span><span class="p">(</span><span class="nx">workInProgress</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">Component</span><span class="dl">'</span><span class="p">,</span>
      <span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">classComponentUpdater</span><span class="p">.</span><span class="nx">enqueueReplaceState</span><span class="p">(</span><span class="nx">instance</span><span class="p">,</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">state</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here in development mode, it calls out that the <code class="language-plaintext highlighter-rouge">state</code> property should not be mutated after running the client‚Äôs defined <code class="language-plaintext highlighter-rouge">componentWillMount</code> method. It was a common error for developers learning the library to mutate state in <code class="language-plaintext highlighter-rouge">componentWillMount</code> directly, and React calls out that this should never be done outside of the <code class="language-plaintext highlighter-rouge">constructor</code>, the one place where the <code class="language-plaintext highlighter-rouge">state</code> property can be initialized with direct assignment.</p>

<h3 id="public-api">Public API</h3>

<p>React class components choose to underscore prefix some private properties:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
    <span class="cm">/**
        0: "props"
        1: "context"
        2: "refs"
        3: "updater"
        13: "state"
        14: "_reactInternalFiber"
        15: "_reactInternalInstance"
     */</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you haven‚Äôt seen the <code class="language-plaintext highlighter-rouge">_reactInternalFiber</code> property before, that‚Äôs the goal. React has pre-fixed it with an underscore to signify that clients should generally avoid touching that property.</p>

<p>To check if they are using the <code class="language-plaintext highlighter-rouge">defineProperty</code> getters approach of hiding some internal properties, we can use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames"><code class="language-plaintext highlighter-rouge">Object.getOwnPropertyNames</code></a> API which returns all of the own property keys of an object, even if it was set with <code class="language-plaintext highlighter-rouge">enumerable</code> false.</p>

<p>We can write a quick function to gather all inherited properties by doing this recursively for an object and its prototype:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getAllProperties</span> <span class="o">=</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> 
  <span class="kd">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Set</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
  <span class="kd">const</span> <span class="nx">proto</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">proto</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">getAllProperties</span><span class="p">(</span><span class="nx">proto</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">prop</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">prop</span><span class="p">));</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">props</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here is what we get when we run it on an instance of a React component:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getAllProperties</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
    <span class="cm">/**
        0: "props"
        1: "context"
        2: "refs"
        3: "updater"
        13: "state"
        14: "_reactInternalFiber"
        15: "_reactInternalInstance"
        16: "constructor"
        20: "isReactComponent"
        21: "setState"
        22: "forceUpdate"
        23: "isPureReactComponent"
        24: "isMounted"
        25: "replaceState"
        26: "__defineGetter__"
        27: "__defineSetter__"
        28: "hasOwnProperty"
        29: "__lookupGetter__"
        30: "__lookupSetter__"
        31: "isPrototypeOf"
        32: "propertyIsEnumerable"
        33: "toString"
        34: "valueOf"
        35: "__proto__"
        36: "toLocaleString"
     */</span>
<span class="p">}</span>
</code></pre></div></div>

<p>How many of these were intended to be exposed to us? We can check that with the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable">propertyIsEnumerable</a> API:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getAllPropertiesWithEnumerability</span> <span class="o">=</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> 
  <span class="kd">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Set</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">prop</span> <span class="o">=&gt;</span> <span class="s2">`</span><span class="p">${</span><span class="nx">prop</span><span class="p">}</span><span class="s2">-</span><span class="p">${</span><span class="nx">obj</span><span class="p">.</span><span class="nx">propertyIsEnumerable</span><span class="p">(</span><span class="nx">prop</span><span class="p">)}</span><span class="s2">`</span><span class="p">));</span>
  <span class="kd">const</span> <span class="nx">proto</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">proto</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">getAllPropertiesWithEnumerability</span><span class="p">(</span><span class="nx">proto</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">prop</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">prop</span><span class="p">));</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">props</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Which now gives us:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getAllProperties</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
    <span class="cm">/**
        0: "props-true"
        1: "context-true"
        2: "refs-true"
        3: "updater-true"
        13: "state-true"
        14: "_reactInternalFiber-true"
        15: "_reactInternalInstance-true"
        20: "constructor-true"
        21: "isReactComponent-true"
        22: "setState-true"
        23: "forceUpdate-true"
        24: "isPureReactComponent-true"
        25: "isMounted-false"
        26: "replaceState-false"
        27: "__defineGetter__-false"
        28: "__defineSetter__-false"
        29: "hasOwnProperty-false"
        30: "__lookupGetter__-false"
        31: "__lookupSetter__-false"
        32: "isPrototypeOf-false"
        33: "propertyIsEnumerable-false"
        34: "toString-false"
        35: "valueOf-false"
        36: "__proto__-false"
        37: "toLocaleString-false"
     */</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Some of these properties are inherited from base JavaScript objects like <code class="language-plaintext highlighter-rouge">isPrototypeOf</code> or <code class="language-plaintext highlighter-rouge">toString</code>, but if we look at some of React‚Äôs own properties like <code class="language-plaintext highlighter-rouge">isMounted</code> or <code class="language-plaintext highlighter-rouge">replaceState</code>, we‚Äôll notice that React made the decision to restrict access to those APIs by setting them to <code class="language-plaintext highlighter-rouge">enumerable: false</code> which you can see here in <a href="https://github.com/facebook/react/blob/18d2e0c03e4496a824fdb7f89ea2a3d60c30d49a/packages/react/src/ReactBaseClasses.js#L118">the source</a>.</p>

<p>As the documentation explains, React did this because those APIs have since been deprecated.</p>

<p>Let‚Äôs highlight how React chose to manage its API:</p>

<table>
  <thead>
    <tr>
      <th>Component</th>
      <th>Pattern</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Public API</strong></td>
      <td><strong>underscore prefixing</strong>, module pattern, <strong>property getters</strong></td>
    </tr>
    <tr>
      <td>Data Access</td>
      <td>underscore prefixing, get methods, property getters</td>
    </tr>
    <tr>
      <td>Data Assignment</td>
      <td>underscore prefixing, set methods, setter properties</td>
    </tr>
    <tr>
      <td>Data Mutation</td>
      <td>spread operator, cloning, freezing</td>
    </tr>
  </tbody>
</table>

<p>Overall, React is pretty liberal with its API exposure, with no controls over data assignment or mutation and limited usage of underscore pre-fixing and enumerability controls.</p>

<h2 id="case-study-moment">Case Study: <a href="https://momentjs.com/">Moment</a></h2>

<p>Moment is a popular library for viewing and working with dates in JavaScript.</p>

<p>Usage of the library might look something like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">moment</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">moment</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">date</span> <span class="o">=</span> <span class="nx">moment</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="dl">'</span><span class="s1">YYYY-DD-MM</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// 2019-30-10</span>
</code></pre></div></div>

<h3 id="public-api-1">Public API</h3>

<p>Moment is composed of a wide variety of utility functions for manipulating dates that all live on the moment prototype.</p>

<p>For organization, its source implementation is broken into a folder structure:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src/
  lib/
    modules/
      moment/
        from.js
        now.js
        ...
      format/
        ...
      parse/
        ...
</code></pre></div></div>

<p>This folder structure makes a lot of sense during development, but what what it ends up exposing after it is processed for production is a variation of the module pattern we‚Äôve looked at before. Here is a condensed version of it that highlights the pattern:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nb">global</span><span class="p">,</span> <span class="nx">factory</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">typeof</span> <span class="nx">exports</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">module</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">undefined</span><span class="dl">'</span> <span class="p">?</span>
      <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">()</span> <span class="p">:</span>
      <span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">function</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span> <span class="p">?</span>
        <span class="nx">define</span><span class="p">(</span><span class="nx">factory</span><span class="p">)</span> <span class="p">:</span>
        <span class="nb">global</span><span class="p">.</span><span class="nx">moment</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">()</span>
<span class="p">}(</span><span class="k">this</span><span class="p">,</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">hookCallback</span><span class="p">;</span>

    <span class="kd">function</span> <span class="nx">hooks</span> <span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">hookCallback</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// This is done to register the method called with moment()</span>
    <span class="c1">// without creating circular dependencies.</span>
    <span class="kd">function</span> <span class="nx">setHookCallback</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">hookCallback</span> <span class="o">=</span> <span class="nx">callback</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Moment prototype object</span>
    <span class="kd">function</span> <span class="nx">Moment</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">copyConfig</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">config</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">_d</span> <span class="o">!=</span> <span class="kc">null</span> <span class="p">?</span> <span class="nx">config</span><span class="p">.</span><span class="nx">_d</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span> <span class="p">:</span> <span class="kc">NaN</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isValid</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="kc">NaN</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">// Prevent infinite loop in case updateOffset creates new moment</span>
        <span class="c1">// objects.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">updateInProgress</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">updateInProgress</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
            <span class="nx">hooks</span><span class="p">.</span><span class="nx">updateOffset</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
            <span class="nx">updateInProgress</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">calendar</span> <span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">mom</span><span class="p">,</span> <span class="nx">now</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_calendar</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">_calendar</span><span class="p">[</span><span class="dl">'</span><span class="s1">sameElse</span><span class="dl">'</span><span class="p">];</span>
        <span class="k">return</span> <span class="nx">isFunction</span><span class="p">(</span><span class="nx">output</span><span class="p">)</span> <span class="p">?</span> <span class="nx">output</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">mom</span><span class="p">,</span> <span class="nx">now</span><span class="p">)</span> <span class="p">:</span> <span class="nx">output</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">proto</span> <span class="o">=</span> <span class="nx">Moment</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>

    <span class="nx">proto</span><span class="p">.</span><span class="nx">add</span>               <span class="o">=</span> <span class="nx">add</span><span class="p">;</span>
    <span class="nx">proto</span><span class="p">.</span><span class="nx">calendar</span>          <span class="o">=</span> <span class="nx">calendar</span><span class="p">;</span>
    <span class="nx">proto</span><span class="p">.</span><span class="nx">clone</span>             <span class="o">=</span> <span class="nx">clone</span><span class="p">;</span>
    <span class="nx">proto</span><span class="p">.</span><span class="nx">diff</span>              <span class="o">=</span> <span class="nx">diff</span><span class="p">;</span>

    <span class="kd">function</span> <span class="nx">createFromConfig</span> <span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Moment</span><span class="p">(</span><span class="nx">checkOverflow</span><span class="p">(</span><span class="nx">prepareConfig</span><span class="p">(</span><span class="nx">config</span><span class="p">)));</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">_nextDay</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// Adding is smart enough around DST</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="dl">'</span><span class="s1">d</span><span class="dl">'</span><span class="p">);</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">_nextDay</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">createLocalOrUTC</span> <span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">format</span><span class="p">,</span> <span class="nx">locale</span><span class="p">,</span> <span class="nx">strict</span><span class="p">,</span> <span class="nx">isUTC</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{};</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">locale</span> <span class="o">===</span> <span class="kc">true</span> <span class="o">||</span> <span class="nx">locale</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">strict</span> <span class="o">=</span> <span class="nx">locale</span><span class="p">;</span>
            <span class="nx">locale</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">((</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">isObjectEmpty</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span> <span class="o">||</span>
                <span class="p">(</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">input</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">input</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">// object construction must be done this way.</span>
        <span class="c1">// https://github.com/moment/moment/issues/1423</span>
        <span class="nx">c</span><span class="p">.</span><span class="nx">_isAMomentObject</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="nx">c</span><span class="p">.</span><span class="nx">_useUTC</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">_isUTC</span> <span class="o">=</span> <span class="nx">isUTC</span><span class="p">;</span>
        <span class="nx">c</span><span class="p">.</span><span class="nx">_l</span> <span class="o">=</span> <span class="nx">locale</span><span class="p">;</span>
        <span class="nx">c</span><span class="p">.</span><span class="nx">_i</span> <span class="o">=</span> <span class="nx">input</span><span class="p">;</span>
        <span class="nx">c</span><span class="p">.</span><span class="nx">_f</span> <span class="o">=</span> <span class="nx">format</span><span class="p">;</span>
        <span class="nx">c</span><span class="p">.</span><span class="nx">_strict</span> <span class="o">=</span> <span class="nx">strict</span><span class="p">;</span>

        <span class="k">return</span> <span class="nx">createFromConfig</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">createLocal</span> <span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">format</span><span class="p">,</span> <span class="nx">locale</span><span class="p">,</span> <span class="nx">strict</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">createLocalOrUTC</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">format</span><span class="p">,</span> <span class="nx">locale</span><span class="p">,</span> <span class="nx">strict</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">setHookCallback</span><span class="p">(</span><span class="nx">createLocal</span><span class="p">);</span>

    <span class="nx">hooks</span><span class="p">.</span><span class="nx">fn</span>                    <span class="o">=</span> <span class="nx">proto</span><span class="p">;</span>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">min</span>                   <span class="o">=</span> <span class="nx">min</span><span class="p">;</span>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">max</span>                   <span class="o">=</span> <span class="nx">max</span><span class="p">;</span>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">now</span>                   <span class="o">=</span> <span class="nx">now</span><span class="p">;</span>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">utc</span>                   <span class="o">=</span> <span class="nx">createUTC</span><span class="p">;</span>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">unix</span>                  <span class="o">=</span> <span class="nx">createUnix</span><span class="p">;</span>
    <span class="nx">hooks</span><span class="p">.</span><span class="nx">months</span>                <span class="o">=</span> <span class="nx">listMonths</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">hooks</span><span class="p">;</span>
<span class="p">})));</span>
</code></pre></div></div>

<p>You can check out the full source <a href="https://github.com/moment/moment/blob/96d0d6791ab495859d09a868803d31a55c917de1/moment.js">here</a>.</p>

<p>Let‚Äôs take a moment to digest this code. The outer-most function is another immediately-invoked function expression <strong>(IIFE)</strong>. It is immediately called with a passed-in factory function that holds a closure over all of the variables and functions that the library uses.</p>

<p>For an ES6 import statement like <code class="language-plaintext highlighter-rouge">import moment from 'moment'</code>, what is exposed is the return value of the factory as an export: <code class="language-plaintext highlighter-rouge">module.exports = factory()</code>.</p>

<p>This return value is a function which has a number of public utilities on it, like <code class="language-plaintext highlighter-rouge">months</code>:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">moment</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">moment</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moment</span><span class="p">.</span><span class="nx">months</span><span class="p">());</span>
<span class="mi">0</span><span class="p">:</span> <span class="dl">"</span><span class="s2">January</span><span class="dl">"</span>
<span class="mi">1</span><span class="p">:</span> <span class="dl">"</span><span class="s2">February</span><span class="dl">"</span>
<span class="mi">2</span><span class="p">:</span> <span class="dl">"</span><span class="s2">March</span><span class="dl">"</span>
<span class="mi">3</span><span class="p">:</span> <span class="dl">"</span><span class="s2">April</span><span class="dl">"</span>
<span class="mi">4</span><span class="p">:</span> <span class="dl">"</span><span class="s2">May</span><span class="dl">"</span>
<span class="mi">5</span><span class="p">:</span> <span class="dl">"</span><span class="s2">June</span><span class="dl">"</span>
<span class="mi">6</span><span class="p">:</span> <span class="dl">"</span><span class="s2">July</span><span class="dl">"</span>
<span class="mi">7</span><span class="p">:</span> <span class="dl">"</span><span class="s2">August</span><span class="dl">"</span>
<span class="mi">8</span><span class="p">:</span> <span class="dl">"</span><span class="s2">September</span><span class="dl">"</span>
<span class="mi">9</span><span class="p">:</span> <span class="dl">"</span><span class="s2">October</span><span class="dl">"</span>
<span class="mi">10</span><span class="p">:</span> <span class="dl">"</span><span class="s2">November</span><span class="dl">"</span>
<span class="mi">11</span><span class="p">:</span> <span class="dl">"</span><span class="s2">December</span><span class="dl">"</span>
</code></pre></div></div>

<p>All the helper functions and variables that enable this functionality are not exposed on the object, allowing it to hide its internal implementation.</p>

<p>The function itself can be called to perform the default behaviour of the moment library, which is to instantiate a <code class="language-plaintext highlighter-rouge">new Moment</code> object:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">moment</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">moment</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moment</span><span class="p">());</span>
<span class="nl">_d</span><span class="p">:</span> <span class="nx">Wed</span> <span class="nx">Oct</span> <span class="mi">30</span> <span class="mi">2019</span> <span class="mi">17</span><span class="p">:</span><span class="mi">20</span><span class="p">:</span><span class="mi">39</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0400</span> <span class="p">(</span><span class="nx">Eastern</span> <span class="nx">Daylight</span> <span class="nx">Time</span><span class="p">)</span> <span class="p">{}</span>
<span class="nl">_isAMomentObject</span><span class="p">:</span> <span class="kc">true</span>
<span class="nx">_isUTC</span><span class="p">:</span> <span class="kc">false</span>
<span class="nx">_isValid</span><span class="p">:</span> <span class="kc">true</span>
<span class="nx">_locale</span><span class="p">:</span> <span class="nx">Locale</span> <span class="p">{</span><span class="nl">_calendar</span><span class="p">:</span> <span class="p">{</span><span class="err">‚Ä¶</span><span class="p">},</span> <span class="err">‚Ä¶</span><span class="p">}</span>
<span class="nl">_pf</span><span class="p">:</span> <span class="p">{</span><span class="na">empty</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="na">unusedTokens</span><span class="p">:</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="err">‚Ä¶</span><span class="p">}</span>
<span class="nl">_z</span><span class="p">:</span> <span class="kc">null</span>
</code></pre></div></div>

<h3 id="data-access-and-mutation">Data Access and Mutation</h3>

<p>As seen above, when it does expose objects like its <code class="language-plaintext highlighter-rouge">Moment</code> function, it heavily relies on the use of underscored properties to make clear its public and private API.</p>

<p>Its internal date is stored under the <code class="language-plaintext highlighter-rouge">_d</code> property, which is only restricted by the underscoring and could be mutated or re-assigned if a client really wanted (but shouldn‚Äôt).</p>

<p>Putting it all together, Moment‚Äôs API summary looks like this:</p>

<table>
  <thead>
    <tr>
      <th>Component</th>
      <th>Pattern</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Public API</strong></td>
      <td><strong>underscore prefixing</strong>, <strong>module pattern</strong>, property getters</td>
    </tr>
    <tr>
      <td>Data Access</td>
      <td><strong>underscore prefixing</strong>, get methods, property getters</td>
    </tr>
    <tr>
      <td>Data Assignment</td>
      <td>underscore prefixing, set methods, setter properties</td>
    </tr>
    <tr>
      <td>Data Mutation</td>
      <td>spread operator, cloning, freezing</td>
    </tr>
  </tbody>
</table>

<p>It is a clear example of a library that uses the module pattern to limit its API and chooses to rely on underscored properties to differentiate its underlying implementation.</p>

<h2 id="find-what-works-for-you">Find What Works for You</h2>

<p>JavaScript and its ecosystem doesn‚Äôt have just one right way to do something. The goal of this walk-through is to highlight some of the tools and patterns JavaScript developers have available to them for managing the way they build their libraries.</p>

<p>The decisions a library owner makes in exposing their API and controlling access and mutation of its data can have profound impact on the usability, maintainability and ultimately the success of the library within teams, organizations and the larger community.</p>

<p>There are more case studies to come, feel free to reach out on <a href="https://twitter.com/TheDerivative">Twitter</a> to suggest any that you would like to see talked about.</p>

:ET