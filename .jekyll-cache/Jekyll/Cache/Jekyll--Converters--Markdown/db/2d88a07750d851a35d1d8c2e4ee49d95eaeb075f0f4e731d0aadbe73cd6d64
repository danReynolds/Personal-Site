I"ÐH<p>In 2015, the ECMAScript language specification which is used as the standard for JavaScript in many browsers published its 6th version. This update is the successor to the version published in 2009 and a lot has changed in the JavaScript world since then.</p>

<!--halt-->

<h1 id="moving-to-es6">Moving to ES6</h1>

<p>One of our React apps at work was being updated to a new linter configuration to conform with the <a href="https://github.com/airbnb/javascript">Airbnb</a> ES6 standard and it gave me an opportunity to learn about many of the new feature and syntax improvements that have been introduced in this update.</p>

<p>Iâ€™m only going to go over a few of the most significant and interesting changes that we have had to make in our updated applications but the entire specification is available <a href="http://www.ecma-international.org/ecma-262/6.0/">here</a>.</p>

<h1 id="arrow-functions">Arrow Functions</h1>

<p>ES6 introduced a new function shorthand syntax and it has quickly become one of my favorite new features of the language. Arrow functions replace the classic <code class="language-plaintext highlighter-rouge">function() {}</code>, making code much less verbose.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="p">});</span>

<span class="c1">// Arrow syntax</span>
<span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="p">});</span>

<span class="c1">// Single line functions omit a return and curly braces</span>
<span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span></code></pre></figure>

<p>In addition to cleaning up the function syntax, the power of the arrow function comes from its implicit binding of the functionâ€™s <code class="language-plaintext highlighter-rouge">this</code> keyword to its value in the enclosing scope. In the following example, a React class needs to render the HTML for each item in its passed down properties:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">GroceryList</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
  <span class="na">getDefaultProps</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">items</span><span class="p">:</span> <span class="p">[{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bread</span><span class="dl">'</span> <span class="p">}]</span>
    <span class="p">};</span>
  <span class="p">},</span>
  <span class="na">renderItem</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">;
</span>  <span class="p">},</span>
  <span class="na">render</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">items</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">renderItem</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">items</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span></code></pre></figure>

<p>The items mapping has to bind <code class="language-plaintext highlighter-rouge">this</code> in order for the call-site of <code class="language-plaintext highlighter-rouge">renderItem</code> to have to the function. With arrow functions, the mapping can be expressed more simply as shown below:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">items</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">renderItem</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
<span class="p">));</span></code></pre></figure>

<p>Other use cases for arrow functions include callbacks to asynchronous functions such as with AJAX requests or timeouts.</p>

<h1 id="classes">Classes</h1>

<p>One of the most interesting changes in ES6 is the introduction of classes. Object-oriented classes were previously achievable in JS using prototype-based OO patterns, but the introduction of the official class syntax provides a consolidated, clean class interface. React has embraced the use of ES6 classes and now encourages the use of component extension over the traditional <code class="language-plaintext highlighter-rouge">React.createClass</code>.</p>

<p>The example below illustrates the new class-based React component syntax:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="nx">React</span><span class="p">;</span>
<span class="kd">class</span> <span class="nx">ContainerItem</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="s2">`Container Item for </span><span class="p">${</span><span class="nx">props</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="s2">`</span>
    <span class="p">};</span>
  <span class="p">}</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">}</span>
<span class="p">};</span>
<span class="nx">ContainerItem</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">container</span><span class="p">:</span> <span class="kc">null</span>
<span class="p">};</span></code></pre></figure>

<p>At this point you may have some questions such as the following:</p>

<p>Where did <code class="language-plaintext highlighter-rouge">getInitialState</code> go? What does super do? Wait why are there backticks and what is even happening with that first line in the render method?</p>

<p>All in good time. The above ES6 class is a lot to process when coming from an ES5 world so letâ€™s break it down into parts:</p>

<ol>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">extends</code> keyword is used to create a class that inherits from the extended class.</p>
  </li>
  <li>
    <p>On instantiation, the constructor method is called automatically and it can call the extended classâ€™s constructor using the <code class="language-plaintext highlighter-rouge">super</code> keyword. In React, the parent class must call <code class="language-plaintext highlighter-rouge">super</code> in order for <code class="language-plaintext highlighter-rouge">this</code> to be available in the constructor.</p>
  </li>
  <li>
    <p>The initial state for the React class is set in the constructor, replacing the <code class="language-plaintext highlighter-rouge">getInitialState</code> method. The <code class="language-plaintext highlighter-rouge">getDefaultProps</code> method has been similarly replaced by the <code class="language-plaintext highlighter-rouge">defaultProps</code> property.</p>
  </li>
  <li>
    <p>Backticks are used to support ES6 template strings, which are similar to the string interpolation mechanisms in other languages like Python or Ruby. Gone are the days of concatenating strings using <code class="language-plaintext highlighter-rouge">+</code> and it is a welcome change.</p>
  </li>
  <li>
    <p>The render method is using two small but important new features from ES6. The first is the <code class="language-plaintext highlighter-rouge">const</code> keyword for variables and must be initialized with a value. If you try and change the value of a const variable after its declaration it will immediately throw a <code class="language-plaintext highlighter-rouge">TypeError</code>. The mutable version of this keyword is <code class="language-plaintext highlighter-rouge">let</code> and both the new variable types are block-scoped in order to address unwanted variable hoisting and scope congestion such as in the situation below:</p>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">a</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// Undefined</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// Throws a ReferenceError</span>
	<span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="nx">a</span><span class="p">();</span></code></pre></figure>

<p>The programmerâ€™s intention is often to use variable <code class="language-plaintext highlighter-rouge">x</code> only in the context of the conditional statement, however, variable hoisting declares <code class="language-plaintext highlighter-rouge">x</code> in the scope of the function, making it undefined when it is printed rather than throwing a ReferenceError like <code class="language-plaintext highlighter-rouge">y</code>.</p>

<p>Replacing <code class="language-plaintext highlighter-rouge">var</code> with <code class="language-plaintext highlighter-rouge">let</code> or <code class="language-plaintext highlighter-rouge">const</code> would cause <code class="language-plaintext highlighter-rouge">x</code> to also throw a reference error and helps the developer determine what went wrong.</p>

<p>The second feature introduced in the render method of our ES6 React component is called <strong>destructuring</strong>. Destructuring uses pattern matching and in the simplest case like the one above, it creates a <code class="language-plaintext highlighter-rouge">const</code> local variable called name equal to the value of the name property from the state object. Naming local variables differently from the properties of the object can similarly be achieved in our example using more complex pattern matching: <code class="language-plaintext highlighter-rouge">const { newName: name } = this.state</code>. Destructuring can be nested arbitrarily and is a powerful new feature of the language.</p>

<h1 id="modules">Modules</h1>

<p>The first line of our new React component imported <code class="language-plaintext highlighter-rouge">React</code> and <code class="language-plaintext highlighter-rouge">Component</code> from the React library using new language-level support for modules in JavaScript with influences from the popular CommonJS and AMD formats. Building imports into the language provides developers with a consistent and optimized module syntax that can be statically analyzed.</p>

<p>The following example shows the basic use of this import/export functionality:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">//------ lib.js ------</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">pi</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">circumference</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">pi</span> <span class="o">*</span> <span class="nx">radius</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">area</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">pi</span> <span class="o">*</span> <span class="nx">radius</span> <span class="o">*</span> <span class="nx">radius</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">//------ main.js ------</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">circumference</span><span class="p">,</span> <span class="nx">area</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">lib</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circumference</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">area</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span></code></pre></figure>

<p>If we wanted to import all of the exports from the lib file we could use the syntax <code class="language-plaintext highlighter-rouge">import * as lib from 'lib'</code> to name the aggregate exports under the <code class="language-plaintext highlighter-rouge">lib</code> object.</p>

<p>In the case that we want our module to consist of only a single export, then an ES6 module can use the <code class="language-plaintext highlighter-rouge">default</code> keyword to select a default export that can then be implicitly imported from other files:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">//------ Example.js ------</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>

<span class="c1">//------ import.js ------</span>
<span class="k">import</span> <span class="nx">Example</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">Example</span><span class="dl">'</span><span class="p">;</span></code></pre></figure>

<h1 id="thoughts">Thoughts</h1>

<p>After having migrated all of our components to the new ES6 syntax and used the new language features on a daily basis for the past month I have found the ES6 specification to be a welcome addition to JavaScript. Our conversion has resulted in clean, readable code that takes advantage of the powerful new features of ES6 and Iâ€™m looking forward to seeing how the language continues to evolve. For anyone who is interested, you can read up on the already drafted ECMAScript 2017 standard <a href="https://tc39.github.io/ecma262">here</a>.</p>
:ET